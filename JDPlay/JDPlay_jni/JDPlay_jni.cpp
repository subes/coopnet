/*	Copyright 2007 	Edwin Stang (edwinstang@gmail.com)

    This file is part of JDPlay.

    JDPlay is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    JDPlay is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with JDPlay.  If not, see <http://www.gnu.org/licenses/>.
*/

/****************************************************************************************************************/

/* JDPlay_jni.cpp:
 *  
 * 	This file implements the JNI for the C++ class.
 *	These functions can be accessed in Java via the JDPlay class shipped with coopnet. 
 *
 * 	This code was created by cxxwrap, a tool to create JNI code from a c++ header file.
 * 	Do not edit this file!
 */

/****************************************************************************************************************/
 
#include <jni.h>
#include "..\JDPlay\JDPlay.h"
#ifdef __cplusplus
	extern "C" {
#endif

//JDPlay(char* playerName, char* gameGUID, char* hostIP, bool iamhost, bool enableDebug);
JNIEXPORT jlong JNICALL Java_jdplay_JDPlay__1_1c0(JNIEnv* __env, jobject __jobj, jstring playerName, jstring gameGUID, jstring hostIP, jboolean iamhost, jboolean enableDebug){
	const char* __TplayerName = playerName == 0 ? NULL : __env->GetStringUTFChars(playerName, NULL);
	const char* __TgameGUID = gameGUID == 0 ? NULL : __env->GetStringUTFChars(gameGUID, NULL);
	const char* __ThostIP = hostIP == 0 ? NULL : __env->GetStringUTFChars(hostIP, NULL);
	JDPlay* __obj = new JDPlay((char*)__TplayerName, (char*)__TgameGUID, (char*)__ThostIP, (bool)iamhost, (bool)enableDebug);
	//if (playerName != 0) __env->ReleaseStringUTFChars(playerName, __TplayerName); //Don't uncomment, playername will be missing ingame!
	if (gameGUID != 0) __env->ReleaseStringUTFChars(gameGUID, __TgameGUID);
	if (hostIP != 0) __env->ReleaseStringUTFChars(hostIP, __ThostIP);
	return (jlong) __obj;
}

//bool isInitializedProperly();
JNIEXPORT jboolean JNICALL Java_jdplay_JDPlay__1_1m0(JNIEnv* __env, jobject, jlong __imp){
	JDPlay* __obj = (JDPlay*) __imp;
	bool __retval = __obj->isInitializedProperly();
	return (jboolean) __retval;
}

//void setMaxSearchRetries(int maxRetries);
JNIEXPORT void JNICALL Java_jdplay_JDPlay__1_1m1(JNIEnv* __env, jobject, jlong __imp, jint maxRetries){
	JDPlay* __obj = (JDPlay*) __imp;
	__obj->setMaxSearchRetries((int)maxRetries);
}

//void setPlayerName(char* playerName);
JNIEXPORT void JNICALL Java_jdplay_JDPlay__1_1m2(JNIEnv* __env, jobject, jlong __imp, jstring playerName){
	JDPlay* __obj = (JDPlay*) __imp;
	const char* __TplayerName = playerName == 0 ? NULL : __env->GetStringUTFChars(playerName, NULL);
	__obj->setPlayerName((char*)__TplayerName);
	//if (playerName != 0) __env->ReleaseStringUTFChars(playerName, __TplayerName); //Don't uncomment, playername will be missing ingame!
}

//bool launch(bool searchForSession);
JNIEXPORT jboolean JNICALL Java_jdplay_JDPlay__1_1m3(JNIEnv* __env, jobject, jlong __imp, jboolean searchForSession){
	JDPlay* __obj = (JDPlay*) __imp;
	bool __retval = __obj->launch((bool)searchForSession);
	return (jboolean) __retval;
}

//~JDPlay();
JNIEXPORT void JNICALL Java_jdplay_JDPlay__1_1d(JNIEnv* __env, jobject, jlong __imp){
	JDPlay* __obj = (JDPlay*) __imp;
	delete __obj;
}

#ifdef __cplusplus
	}
#endif
