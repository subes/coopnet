/*	Copyright 2007  Edwin Stang (edwinstang@gmail.com),
 *                  Kovacs Zsolt (kovacs.zsolt.85@gmail.com)
 *
 *  This file is part of Coopnet.
 *
 *  Coopnet is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Coopnet is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Coopnet.  If not, see <http://www.gnu.org/licenses/>.
 */

package coopnetclient.frames.components;

import coopnetclient.frames.clientframe.ClosableTab;
import coopnetclient.utils.ui.Icons;
import java.awt.Font;
import javax.swing.Icon;
import javax.swing.JLabel;

public class TabComponent extends javax.swing.JPanel {

    //TODO: If we ever use the isCurrentlyClosable dynamically,
    //we have to implement a way to update the close button visibility

    ClosableTab closeMe;

    /** Creates new form TabComponent */
    public TabComponent(ClosableTab closeMe) {
        initComponents();
        putClientProperty("html.disable", Boolean.TRUE);
        lbl_text.setVerticalTextPosition(JLabel.BOTTOM);
        lbl_close.setIcon(Icons.tabCloseIconNormal);
        this.closeMe = closeMe;
        lbl_close.setVisible(closeMe.isCurrentlyClosable());
    }


    public TabComponent(String title, ClosableTab closeMe){
        this(closeMe);
        lbl_text.setText(title);
    }

    public TabComponent(String title, Icon icon, ClosableTab closeMe){
        this(title,closeMe);
        lbl_icon.setIcon(icon);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbl_text = new javax.swing.JLabel();
        lbl_close = new javax.swing.JLabel();
        lbl_icon = new javax.swing.JLabel();

        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(1, 20));
        setOpaque(false);
        setPreferredSize(null);
        setLayout(new java.awt.GridBagLayout());

        lbl_text.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_text.setText("text");
        lbl_text.setFocusable(false);
        lbl_text.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lbl_text.setMaximumSize(new java.awt.Dimension(1000, 20));
        lbl_text.setMinimumSize(new java.awt.Dimension(1, 20));
        lbl_text.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(lbl_text, gridBagConstraints);

        lbl_close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_close.setFocusable(false);
        lbl_close.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lbl_close.setIconTextGap(0);
        lbl_close.setMaximumSize(null);
        lbl_close.setMinimumSize(null);
        lbl_close.setPreferredSize(null);
        lbl_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbl_closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbl_closeMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(lbl_close, gridBagConstraints);

        lbl_icon.setText(null);
        lbl_icon.setFocusable(false);
        lbl_icon.setMaximumSize(null);
        lbl_icon.setMinimumSize(null);
        lbl_icon.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(lbl_icon, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void lbl_closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_closeMouseClicked
        if(closeMe.isCurrentlyClosable()){
            closeMe.closeTab();
        }
    }//GEN-LAST:event_lbl_closeMouseClicked

    private void lbl_closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_closeMouseEntered
         lbl_close.setIcon(Icons.tabCloseIconMouseOver);
    }//GEN-LAST:event_lbl_closeMouseEntered

    private void lbl_closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_closeMouseExited
        lbl_close.setIcon(Icons.tabCloseIconNormal);
    }//GEN-LAST:event_lbl_closeMouseExited

    @Override
    public Font getFont(){
        if(lbl_text != null){
            return lbl_text.getFont();
        }
       return null;
    }
    
    @Override
    public void setFont(Font f){
        if(lbl_text != null){
            lbl_text.setFont(f);
        }
    }

    public void setTitle(String title){
        lbl_text.setText(title);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbl_close;
    private javax.swing.JLabel lbl_icon;
    private javax.swing.JLabel lbl_text;
    // End of variables declaration//GEN-END:variables

}
