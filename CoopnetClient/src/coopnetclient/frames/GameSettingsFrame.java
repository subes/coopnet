/*	Copyright 2007  Edwin Stang (edwinstang@gmail.com), 
Kovacs Zsolt (kovacs.zsolt.85@gmail.com)

This file is part of Coopnet.

Coopnet is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Coopnet is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Coopnet.  If not, see <http://www.gnu.org/licenses/>.
 */
package coopnetclient.frames;

import coopnetclient.Client;
import coopnetclient.Globals;
import coopnetclient.Protocol;
import coopnetclient.frames.clientframe.TabOrganizer;
import coopnetclient.utils.gamedatabase.GameDatabase;
import java.io.File;
import java.util.HashMap;
import java.util.Vector;

public class GameSettingsFrame extends javax.swing.JFrame {

    private int fieldcount = 0;
    private String gamename;
    private String modname;
    private HashMap<String, String> gamemodes = new HashMap<String, String>();
    private String roomname , password;
    private int modindex, maxPlayers;
    private boolean compatible,isInstant;

    /** Creates new form GameSettingsPanel */
    public GameSettingsFrame(String gamename, String modname) {
        initComponents();
        this.gamename = gamename;
        this.modname = modname;
        hideAll();
        customize();        
    }
 
    /** Creates new form GameSettingsPanel */
    public GameSettingsFrame(String gamename, String modname , String name , String password, int modindex, int maxPlayers, boolean compatible) {
        initComponents();
        isInstant = true;
        this.gamename = gamename;
        this.modname = modname;
        this.roomname = name ;
        this.password = password;
        this.modindex = modindex;
        this.maxPlayers = maxPlayers;
        this.compatible = compatible;
        btn_save.setText("Launch");
        hideAll();
        customize();
    }
    
    private String KeyOfValue(String value) {
        for (String s : gamemodes.keySet()) {
            String val = gamemodes.get(s);
            if (val.equals(value)) {
                return s;
            }
        }
        return null;
    }

    private void hideAll() {
        tf_port.setVisible(false);
        spn_timeLimit.setVisible(false);
        lbl_timeLimit.setVisible(false);
        lbl_port.setVisible(false);
        lbl_map.setVisible(false);
        lbl_mode.setVisible(false);
        cb_mode.setVisible(false);
        cb_map.setVisible(false);
        lbl_bots.setVisible(false);
        spn_bots.setVisible(false);
        lbl_scoreLimit.setVisible(false);
        spn_scoreLimit.setVisible(false);
    }

    private void customize() {
        //add setting components to frame and internal lists
    }

    private String[] getGameModes() {
        Vector<String> modenames = new Vector<String>();
        //...
        return modenames.toArray(new String[0]);
    }

    private String[] loadMaps() {
        String extension = GameDatabase.getMapExtension(gamename, modname);
        String path = Globals.getLauncher().getFullMapPath(gamename);
        System.out.println("loading maps from: " + path);
        if (path.endsWith("\\") || path.endsWith("/")) {
            path = path.substring(0, path.length() - 1);
        }
        File mapdir = new File(path);
        if (!mapdir.isDirectory()) {
            return new String[0];
        }
        File files[] = mapdir.listFiles();
        Vector<String> names = new Vector<String>();
        for (File f : files) {
            String tmp = f.getName();
            if (tmp.endsWith(extension));
            names.add(tmp);
        }
        return names.toArray(new String[0]);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btn_save = new javax.swing.JButton();
        pnl_settings = new javax.swing.JPanel();
        lbl_mode = new javax.swing.JLabel();
        cb_mode = new javax.swing.JComboBox();
        lbl_map = new javax.swing.JLabel();
        cb_map = new javax.swing.JComboBox();
        lbl_timeLimit = new javax.swing.JLabel();
        spn_timeLimit = new javax.swing.JSpinner();
        lbl_scoreLimit = new javax.swing.JLabel();
        spn_scoreLimit = new javax.swing.JSpinner();
        lbl_bots = new javax.swing.JLabel();
        spn_bots = new javax.swing.JSpinner();
        tf_port = new javax.swing.JTextField();
        lbl_port = new javax.swing.JLabel();

        setTitle("Game settings");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        pnl_settings.setBorder(javax.swing.BorderFactory.createTitledBorder("Game settings"));
        pnl_settings.setLayout(new java.awt.GridBagLayout());

        lbl_mode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_mode.setText("Mode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnl_settings.add(lbl_mode, gridBagConstraints);

        cb_mode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnl_settings.add(cb_mode, gridBagConstraints);

        lbl_map.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_map.setText("Map:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnl_settings.add(lbl_map, gridBagConstraints);

        cb_map.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnl_settings.add(cb_map, gridBagConstraints);

        lbl_timeLimit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_timeLimit.setText("Time limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnl_settings.add(lbl_timeLimit, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnl_settings.add(spn_timeLimit, gridBagConstraints);

        lbl_scoreLimit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_scoreLimit.setText("Score limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnl_settings.add(lbl_scoreLimit, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnl_settings.add(spn_scoreLimit, gridBagConstraints);

        lbl_bots.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_bots.setText("Bots:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnl_settings.add(lbl_bots, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnl_settings.add(spn_bots, gridBagConstraints);

        tf_port.setMaximumSize(new java.awt.Dimension(30, 20));
        tf_port.setMinimumSize(new java.awt.Dimension(30, 20));
        tf_port.setPreferredSize(new java.awt.Dimension(30, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnl_settings.add(tf_port, gridBagConstraints);

        lbl_port.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_port.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnl_settings.add(lbl_port, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_settings, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_save)
                .addContainerGap(359, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_settings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_save)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
    //update the launcher
    try {
        //if somethings unselected an exception is thrown        
        if (cb_map.isVisible()) {
            Globals.getLauncher().setMap(cb_map.getSelectedItem().toString());
            System.out.println("map was set:"+cb_map.getSelectedItem().toString());
        }
        //save settings
        //for(...)
        
        if(!isInstant){
            TabOrganizer.getRoomPanel().enableButtons();
        }
        //send all shared setting
        Client.send(Protocol.SendPort(new Integer(tf_port.getText())), null);

        Globals.closeGameSettingsFrame();
    } catch (Exception e) {
        e.printStackTrace();
    }
    if (btn_save.getText().equals("Launch")) {
        Client.send(Protocol.createRoom(roomname, modindex + "", password, maxPlayers + "", compatible, true ), gamename);
                    Globals.closeRoomCreationFrame();
        Client.instantLaunch(gamename, modindex, maxPlayers, compatible);
    }

}//GEN-LAST:event_btn_saveActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    Globals.closeGameSettingsFrame();
}//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_save;
    private javax.swing.JComboBox cb_map;
    private javax.swing.JComboBox cb_mode;
    private javax.swing.JLabel lbl_bots;
    private javax.swing.JLabel lbl_map;
    private javax.swing.JLabel lbl_mode;
    private javax.swing.JLabel lbl_port;
    private javax.swing.JLabel lbl_scoreLimit;
    private javax.swing.JLabel lbl_timeLimit;
    private javax.swing.JPanel pnl_settings;
    private javax.swing.JSpinner spn_bots;
    private javax.swing.JSpinner spn_scoreLimit;
    private javax.swing.JSpinner spn_timeLimit;
    private javax.swing.JTextField tf_port;
    // End of variables declaration//GEN-END:variables
}
