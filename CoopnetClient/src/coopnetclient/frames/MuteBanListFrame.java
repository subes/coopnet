/*	Copyright 2007  Edwin Stang (edwinstang@gmail.com), 
 *                  Kovacs Zsolt (kovacs.zsolt.85@gmail.com)
 *
 *  This file is part of Coopnet.
 *
 *  Coopnet is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Coopnet is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Coopnet.  If not, see <http://www.gnu.org/licenses/>.
 */
package coopnetclient.frames;

import coopnetclient.Client;
import coopnetclient.Globals;
import coopnetclient.protocol.out.Protocol;
import coopnetclient.utils.MuteBanList;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

public class MuteBanListFrame extends javax.swing.JFrame {

    private static CustomeTableModel tablemodel ;
    
    /** Creates new form MuteBanList */
    public MuteBanListFrame() {
        tablemodel =new CustomeTableModel();  
        initComponents();
        tbl_UserTable.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        tbl_UserTable.getColumnModel().getColumn(0).setPreferredWidth(1000);
        tbl_UserTable.getColumnModel().getColumn(1).setPreferredWidth(150);
    }
    
    public void updateTable(){
        tablemodel.update();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_UserTable = new javax.swing.JTable();
        jb_Close = new javax.swing.JButton();
        jb_UnMute = new javax.swing.JButton();
        jb_UnBan = new javax.swing.JButton();
        jb_Show_Profile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mute/Ban List");
        setResizable(false);

        tbl_UserTable.setAutoCreateRowSorter(true);
        tbl_UserTable.setModel(tablemodel);
        tbl_UserTable.setFillsViewportHeight(true);
        tbl_UserTable.setFocusable(false);
        jScrollPane1.setViewportView(tbl_UserTable);

        jb_Close.setText("Close");
        jb_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_CloseActionPerformed(evt);
            }
        });

        jb_UnMute.setText("UnMute");
        jb_UnMute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_UnMuteActionPerformed(evt);
            }
        });

        jb_UnBan.setText("UnBan");
        jb_UnBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_UnBanActionPerformed(evt);
            }
        });

        jb_Show_Profile.setText("Show Profile");
        jb_Show_Profile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_Show_ProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jb_Close)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_UnMute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_UnBan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_Show_Profile)
                .addContainerGap(68, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_Close)
                    .addComponent(jb_UnMute)
                    .addComponent(jb_UnBan)
                    .addComponent(jb_Show_Profile))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_CloseActionPerformed
        Globals.closeMuteBanTableFrame();
    }//GEN-LAST:event_jb_CloseActionPerformed

    private void jb_UnMuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_UnMuteActionPerformed
        int viewRow = tbl_UserTable.getSelectedRow();
        if (viewRow > -1) {
            int selected = tbl_UserTable.convertRowIndexToModel(viewRow);
            String subject = tablemodel.getValueAt(selected, 0).toString();
            Client.send(Protocol.unmute(subject));
            MuteBanList.unMute(subject);
            updateTable();
        }
    }//GEN-LAST:event_jb_UnMuteActionPerformed

    private void jb_UnBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_UnBanActionPerformed
        int viewRow = tbl_UserTable.getSelectedRow();
        if (viewRow > -1) {
            int selected = tbl_UserTable.convertRowIndexToModel(viewRow);
            String subject = tablemodel.getValueAt(selected, 0).toString();
            Client.send(Protocol.unban(subject));
            MuteBanList.unBan(subject);
            updateTable();
        }
    }//GEN-LAST:event_jb_UnBanActionPerformed

    private void jb_Show_ProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_Show_ProfileActionPerformed
        int viewRow = tbl_UserTable.getSelectedRow();
        if (viewRow > -1) {
            int selected = tbl_UserTable.convertRowIndexToModel(viewRow);
            String subject = tablemodel.getValueAt(selected, 0).toString();
            Client.send(Protocol.requestProfile(subject));
        }
    }//GEN-LAST:event_jb_Show_ProfileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_Close;
    private javax.swing.JButton jb_Show_Profile;
    private javax.swing.JButton jb_UnBan;
    private javax.swing.JButton jb_UnMute;
    private javax.swing.JTable tbl_UserTable;
    // End of variables declaration//GEN-END:variables

    private class CustomeTableModel extends AbstractTableModel{

        @Override
        public String getColumnName(int column) {
            return column == 0? "Name" : "Status" ;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
        
        @Override
        public int getRowCount() {
            return MuteBanList.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if(columnIndex == 0){
                return MuteBanList.getElementAt(rowIndex);
            }else{
                return MuteBanList.getMuteBanStatus((MuteBanList.getElementAt(rowIndex)));
            }
        }

        public void update(){
            fireTableDataChanged();
        }
        
    }
}
