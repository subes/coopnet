<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <!--<module name="PackageHtml"/>-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for duplicate code, Simian is free to use in OpenSource projects! -->
    <!-- See http://www.redhillconsulting.com.au/products/simian/ -->
    <module name="au.com.redhillconsulting.simian.SimianCheck"/>
    
    <!-- Ignore generated code by Matisse -->
    <module name="cz.sickboy.netbeans.checkstyle.extra.GeneratedUIFilter"/>

    <!-- Allow CHECKSTYLE:OFF and CHECKSTYLE:ON comments -->
    <module name="SuppressionCommentFilter"/>

    <module name="TreeWalker">

         <!-- Ignore generated code by Matisse -->
        <module name="FileContentsHolder"/>
        
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--<module name="JavadocMethod"/>-->
        <!--<module name="JavadocType"/>-->
        <!--<module name="JavadocVariable"/>-->
        <!--<module name="JavadocStyle"/>-->


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="PackageName">
            <property name="format"
                      value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format"
                      value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalVariableName">
            <property name="format"
                      value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>
        <module name="MemberName">
            <property name="format"
                      value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>
        <module name="ParameterName">
            <property name="format"
                      value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>
        <module name="StaticVariableName">
            <property name="format"
                      value="^[a-z][_a-zA-Z0-9]*$"/>
        </module>
        <module name="MethodName"/>
        <module name="TypeName"/>
        <!--<module name="AbstractClassName"/>-->
        


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <module name="RegexpHeader">
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <property
            name="headerFile"
            value="${header.file}" />
        </module>

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength">
              <property name="max" value="1000"/>
        </module>
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>
         <module name="MethodLength">
            <property name="max" value="100"/>
        </module>
        <module name="ParameterNumber"/>
        <module name="AnonInnerLength">
              <property name="max" value="60"/>
        </module>
        <module name="ParameterNumber"/>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <!--<module name="NoWhitespaceAfter"/>-->
        <!--<module name="NoWhitespaceBefore"/>-->
        <module name="OperatorWrap">
            <property name="tokens" value="ASSIGN, BOR_ASSIGN, BSR_ASSIGN, BAND_ASSIGN, BXOR_ASSIGN, DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN, SL_ASSIGN, SR_ASSIGN, STAR_ASSIGN"/>
            <property name="option" value="eol"/>
        </module>
        <module name="OperatorWrap">
        <!-- Excluding PLUS (+) because Netbeans puts it on EOL for String, though for numerics, it should be NL (dunno how to force it)-->
            <property name="tokens" value="BAND, BOR, BSR, BXOR, COLON, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, QUESTION, SL, SR, STAR"/>
            <property name="option" value="nl"/>
        </module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="TabCharacter"/>
        <!--<module name="WhitespaceAfter"/>-->
        <!--<module name="WhitespaceAround"/>-->


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--<module name="AvoidInlineConditionals"/>-->
        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!--<module name="HiddenField"/>-->
        <!--<module name="ArrayTrailingComma"/>-->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="RedundantThrows"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="BooleanExpressionComplexity"/>
        <module name="CovariantEquals"/>
        <!--<module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF"/>
        </module>-->
        <module name="MissingSwitchDefault"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="JUnitTestCase"/>
        <module name="DeclarationOrder"/>
        <module name="ParameterAssignment"/>
        <module name="ExplicitInitialization"/>
        <module name="DefaultComesLast"/>
        <module name="MultipleStringLiterals">
            <property name="ignoreStringsRegexp" value="^&quot;&quot;$|^&quot;\W&quot;$|^&quot; \W &quot;$|^&quot;\W &quot;$|^&quot;\\n&quot;$"/>
        </module>
        <module name="MultipleVariableDeclarations"/>
         <module name="NestedIfDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>
        <module name="RedundantThrows">
            <property name="logLoadErrors" value="true"/>
            <property name="suppressLoadErrors" value="true"/>
        </module>
        <!--<module name="IllegalCatch"/>-->
        <!--<module name="IllegalThrows"/>-->
        <!--<module name="RequireThis"/>-->
        <module name="ThrowsCount">
            <property name="max" value="3"/>
        </module>
        <module name="MutableException" />
        <module name="ReturnCount">
            <property name="max" value="5"/>
        </module>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--<module name="DesignForExtension"/>-->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor" />
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
			<property name="protectedAllowed" value="true"/>
        </module>
        <module name="CyclomaticComplexity"/>
        <module name="NPathComplexity"/>
        <module name="JavaNCSS"/>
        <module name="ClassFanOutComplexity"/>
        <module name="ClassDataAbstractionCoupling"/>
        
        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <!--<module name="FinalParameters"/>-->
        <!--<module name="GenericIllegalRegexp">
            <property name="ignoreComments" value="true"/>
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>-->
        <module name="GenericIllegalRegexp">
            <!-- . matches any character, so we need to
                 escape it and use \. to match dots. -->
            <property name="format" value="System\.out\.print"/>
            <property name="message" value="Use Logger.log(msg) instead"/>
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.err\.print"/>
            <property name="message" value="Use Logger.logErr(msg) instead"/>
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="\.printStackTrace"/>
            <property name="message" value="Use Logger.log(exc) instead"/>
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="(new|extends)[ ]*Thread"/>
            <property name="message" value="Use ErrThread instead"/>
        </module>
        <module name="GenericIllegalRegexp">
            <property name="format" value="(new|extends)[ ]*SwingWorker"/>
            <property name="message" value="Use ErrSwingWorker instead"/>
        </module>
        <module name="TodoComment"/>
        <module name="UpperEll"/>
        <module name="UncommentedMain">
            <property name="excludedClasses" value="\.Main$"/>
        </module>
        <module name="DescendantToken">
            <!-- Initialiser in for performs no setup (use while instead?) -->
            <property name="tokens" value="FOR_INIT"/>
            <property name="limitedTokens" value="EXPR"/>
            <property name="minimumNumber" value="1"/>
        </module>

    </module>

</module>
